#! /usr/bin/env python

#------------------------------------------------------------------------
# This file is distributed under the Common Public License.
# It is part of the BuildTools project in COIN-OR (www.coin-or.org)
#------------------------------------------------------------------------

import os
import sys
import re
import shutil

import NBlogMessages
import NBemail
import NBosCommand
import NBsvnCommand
import NBcheckResult

#---------------------------------------------------------------------
# Keep history so same project is not repeatedly getting code from
# subversion repository.
#---------------------------------------------------------------------
SVN_HISTORY = {}
THIRD_PARTY_HISTORY = []


#---------------------------------------------------------------------
# cleanUpName:
# File and directory names are generated and may contain 
# undesireable characters.
# Remove these characters from the name
#---------------------------------------------------------------------
def cleanUpName(messedUpName) :
  cleanedUpName=messedUpName
  cleanedUpName=cleanedUpName.replace('-','')
  cleanedUpName=cleanedUpName.replace('/','-')
  cleanedUpName=cleanedUpName.replace('\\','-')
  cleanedUpName=cleanedUpName.replace(' ','')
  cleanedUpName=cleanedUpName.replace('"','')
  cleanedUpName=cleanedUpName.replace("'",'')
  cleanedUpName=cleanedUpName.replace("=",'-')
  cleanedUpName=cleanedUpName.replace(":",'')
  cleanedUpName=cleanedUpName.replace('--enable','')
  return cleanedUpName


#---------------------------------------------------------------------
# writeResults:
# After running a command write stdout and stderr to a file
#---------------------------------------------------------------------
def writeResults(result,filenameSuffix) :
  cleanedUpSuffix=cleanUpName(filenameSuffix)
  stdoutfile=open('NBstdout-'+cleanedUpSuffix,'w')
  stdoutfile.write(result['stdout'])
  stdoutfile.close()
  stderrfile=open('NBstderr-'+cleanedUpSuffix,'w')
  stderrfile.write(result['stderr'])
  stderrfile.close()
  
#------------------------------------------------------------------------
#  Given a configuration, build and test it.
#
#  configuration['project']= name of project.
#   examples: "Clp", "Ipopt"
#
#  configuration['rootDir']= root directory of nightlyBuild.
#   This is where the project will be checked out from svn, and
#   where the code will be compiled.  This directory must already
#   exist.  If the testing requires, it needs to contain Netlib & miplib3
#
#  configuration['svnVersion']= svn version to be built.
#   Examples are: "trunk", "stable/3.2", "releases/3.3.3"
#
#  configuration['buildMethod']= Defines method for building code.
#  Choices are:
#    msSoln: use microsoft compiler with a solution (sln) file.
#    unixConfig: use sequence "./configure", "make", "make test"
#
#  configuration['noThirdParty']=True or False (optional). If False 
#   then 3rd party code will be used. If not specified then 3rd part
#   code will be skipped.
#   Only used if configuration['buildMethod']=='unixConfig'
#
#  configuration['configOptions']: Parameters to be passed to configure.
#   The -C option and the options for skipping 3rd party code do not
#   need to be specified.  These will be generated by this function.
#   There are two types of configOptions to be specified.
#   Only used if configuration['buildMethod']=='unixConfig'
#  configuration['configOptions']['unique']= These are options that
#   distinguish different build configurations.  These options are used
#   to generate the vpath directory name where the code will be built.
#   Examples are: "", "--enable-debug" "--enable-parrallel"
#  configuration['configOptions']['invariant']= These are options that
#   that are the same for every build configuration so they don't need
#   to be part of the vpath directory name.
#   Example: 'CXX="g++ -m64" LDFLAGS=-lstdc++'
#  
#  configuration['SkipProjects']= List of COIN projects to skip (exclude)
#    from the build.
#    examples: "Ipopt", "Ipopt DyLP"
#
#  configuration['slnFile']= path and name of solution file if it is not
#    in the standard location.
#    Only used if configuration['buildMethod']=='unixConfig'
#
#  configuration['test']=vector of triples indicating tests that 
#    are to be run after building the project. Each triple consists
#    of:
#    'dir': directory where test command is to be issued.
#    'cmd': command to be run with any parameters.
#    'check': vector of functions to be called which will check the 
#           results from running 'cmd' to determine if an error occurred
#------------------------------------------------------------------------
def run(configuration) :
  NBlogMessages.clearMessages()
  NBlogMessages.writeMessage( configuration['project'] )

  # Create svn checkout target directory name
  svnVersionFlattened=cleanUpName(configuration['svnVersion'])

  #---------------------------------------------------------------------
  # Create names of directory where source is located and
  # and were object, libs and executables are located (build directory)
  # To compute build directory, the ./configure options need to be 
  # generated.
  #---------------------------------------------------------------------
  projectBaseDir=os.path.join(configuration['rootDir'],configuration['project'])
  projectCheckOutDir=os.path.join(projectBaseDir,svnVersionFlattened)

  svnCheckOutUrl='https://projects.coin-or.org/svn/'+\
                 configuration['project']+'/'+\
                 configuration['svnVersion']

  buildDir=svnVersionFlattened

  if configuration['buildMethod']=='unixConfig' :
    buildDir+=configuration['configOptions']['unique']
    if 'SkipProjects' in configuration :
      buildDir+="No"+configuration['SkipProjects']
    if 'noThirdParty' in configuration : 
      if configuration['noThirdParty'] :
        buildDir+='-NoThirdParty'
    buildDir=cleanUpName(buildDir)
    if buildDir==svnVersionFlattened : buildDir+='-default'

  fullBuildDir = os.path.join(projectBaseDir,buildDir)

  NBlogMessages.writeMessage('  SVN source URL: '+svnCheckOutUrl)
  NBlogMessages.writeMessage('  Checkout directory: '+projectCheckOutDir)
  NBlogMessages.writeMessage('  Build directory: '+fullBuildDir)
  
  #for a list of commands that have been executed
  commandHistory = []

  #---------------------------------------------------------------------
  # If nothing has changed and the prior run tested OK, then there
  # is no need to do anything.
  #---------------------------------------------------------------------
  if os.path.isdir(fullBuildDir) :
    os.chdir(fullBuildDir)
    if os.path.isfile('NBallTestsPassed') : 
      msg=NBsvnCommand.newer(svnCheckOutUrl,projectCheckOutDir)
      if not msg:
        # Previous run ran fine, and nothing has changed.
        NBlogMessages.writeMessage('  No changes since previous successful run')
        return
      NBlogMessages.writeMessage('  '+msg)
      
      # Must remove file NBallTestsPassed from all build directories that
      # use projectCheckoutDir for their source code. This is to ensure
      # that make will be run in all the build dirs after "svn update"
      dirs = os.listdir("..")
      for d in dirs :
        if d.startswith(svnVersionFlattened) :
          fileToBeRemoved=os.path.join("..",d,'NBallTestsPassed')
          if os.path.isfile(fileToBeRemoved) :
            os.remove(fileToBeRemoved)
    else :
      NBlogMessages.writeMessage('  No record of all tests having passed')
  else :
    NBlogMessages.writeMessage('  Targets have not yet been built')


  #---------------------------------------------------------------------
  # svn checkout or update the project
  #---------------------------------------------------------------------
  # Don't get source from subversion if previously done
  if not SVN_HISTORY.has_key(projectCheckOutDir) :
    if not os.path.isdir(projectBaseDir) :
      os.makedirs(projectBaseDir)
    if not os.path.isdir(projectCheckOutDir) :
      svnCmd='svn ' +\
           'checkout ' +\
           svnCheckOutUrl +\
           ' '+svnVersionFlattened
      commandHistory+=[ svnCmd ]
      svnResult=NBsvnCommand.run(svnCmd,projectBaseDir,configuration['project'])
      if svnResult['returnCode'] != 0 :
        return
      runConfigure = True
    else :
      svnCmd='svn update'
      commandHistory+=[ svnCmd ]
      svnResult=NBsvnCommand.run(svnCmd,projectCheckOutDir,configuration['project'])
      if svnResult['returnCode'] != 0 :
        return
      #check whether a *.in or configure file was updated 
      r=r'(\S+\.in\s)|(configure\s)'
      findResult=re.findall(r,svnResult['stdout'])
      if len(findResult)!=0:
        runConfigure = True
      else :
        runConfigure = False

    SVN_HISTORY[projectCheckOutDir]=runConfigure
  else :
    NBlogMessages.writeMessage('  "svn update" skipped. nightlyBuild has already updated for prior build configuration')
    runConfigure=SVN_HISTORY[projectCheckOutDir]

  #---------------------------------------------------------------------
  # If there are third party apps, then get these apps
  #---------------------------------------------------------------------
  if 'noThirdParty' in configuration :
    if not configuration['noThirdParty'] :
      thirdPartyBaseDir=os.path.join(projectCheckOutDir,'ThirdParty')
      if os.path.isdir(thirdPartyBaseDir) :
        if thirdPartyBaseDir not in THIRD_PARTY_HISTORY :
          THIRD_PARTY_HISTORY.append(thirdPartyBaseDir)
          thirdPartyDirs = os.listdir(thirdPartyBaseDir)
          for d in thirdPartyDirs :
            thirdPartyDir=os.path.join(thirdPartyBaseDir,d)
            install3rdPartyCmd=os.path.join(".","get."+d)
            os.chdir(thirdPartyDir)
            # If the install command has been updated since the last
            # install, then do a new install
            if os.path.isfile('NBinstalldone') :
              if NBosCommand.newer(install3rdPartyCmd,'NBinstalldone') :
                os.remove('NBinstalldone')
            if not os.path.isfile('NBinstalldone') :
              if os.path.isfile(install3rdPartyCmd) :
                NBlogMessages.writeMessage('  '+install3rdPartyCmd)
                commandHistory+=[ install3rdPartyCmd ]
                installReturn = NBosCommand.run(install3rdPartyCmd)
                if installReturn['returnCode'] :
                  NBlogMessages.writeMsg('  warning: Install of 3rd party code in '+thirdPartyDir+' returned '+installReturn['returnCode'])
                else :
                  f=open('NBinstalldone','w')
                  f.close()
                writeResults(installReturn,install3rdPartyCmd)
            else :
              NBlogMessages.writeMessage('  skipped a new download of '+d)
        else :
          NBlogMessages.writeMessage('  Skipped a new download into '+thirdPartyBaseDir)

  #---------------------------------------------------------------------
  # Completely remove a previous build if the user indicates this
  #---------------------------------------------------------------------
  if configuration['clear previous build'] and os.path.isdir(fullBuildDir) :
    NBlogMessages.writeMessage('  Remove previous build in directory '+fullBuildDir)
    try:
      shutil.rmtree(fullBuildDir)
    except shutils.Error :
      NBlogMessages.writeMessage('  Warning: removal of directory '+fullBuildDir+' failed.')
    
  #---------------------------------------------------------------------
  # Create the build directory if it doesn't exist
  #---------------------------------------------------------------------
  if not os.path.isdir(fullBuildDir) : 
    os.makedirs(fullBuildDir)

  #---------------------------------------------------------------------
  # Source is now available, so now it is time to run config
  #---------------------------------------------------------------------
  if configuration['buildMethod']=='unixConfig' :
    skipOptions=''

    if 'SkipProjects' in configuration :
      skipOptions+=configuration['SkipProjects']

    # If needed create option for skipping 3rd party code
    needSkip3PartySkipOptions=False
    if 'noThirdParty' not in configuration : 
      needSkip3PartySkipOptions=True
    elif configuration['noThirdParty'] :
      needSkip3PartySkipOptions=True
    if needSkip3PartySkipOptions :
      thirdPartyBaseDir=os.path.join(projectCheckOutDir,'ThirdParty')
      if os.path.isdir(thirdPartyBaseDir) :
        thirdPartyDirs = os.listdir(thirdPartyBaseDir)
        for d in thirdPartyDirs :
          skipOptions+=' ThirdParty/'+d

    if skipOptions!='' :
      skipOptions=' COIN_SKIP_PROJECTS="'+skipOptions+'"'

    os.chdir(fullBuildDir)
    NBlogMessages.writeMessage('  cd '+fullBuildDir)

    # Assemble all config options together and create config command
    configOptions ="-C "+configuration['configOptions']['unique']
    configOptions+=configuration['configOptions']['invariant']
    configOptions+=skipOptions
    configCmd = os.path.join(projectCheckOutDir,"configure "+configOptions)

    # If config was previously run, then no need to run again.
    if (not runConfigure) and NBcheckResult.didConfigRunOK() :
      NBlogMessages.writeMessage("  configure previously ran. Not rerunning.")
    else :
      NBlogMessages.writeMessage("  "+configCmd)
      commandHistory+=[ configCmd ]

      # Finally run config
      result=NBosCommand.run(configCmd)
      writeResults(result,'config') 

      # Check if configure worked
      if result['returnCode'] != 0 :
        error_msg = result
        error_msg['configure flags']=configOptions
        error_msg['svn version']=configuration['svnVersion']
        error_msg['command history']=commandHistory 
        # Add contents of log file to message
        logFileName = 'config.log'
        if os.path.isfile(logFileName) :
          logFilePtr = open(logFileName,'r')
          error_msg['config.log'] = logFilePtr.read()
          logFilePtr.close()
        NBemail.sendCmdMsgs(configuration['project'],error_msg,configCmd)
        return

    #---------------------------------------------------------------------
    # Run make part of build
    #---------------------------------------------------------------------
    NBlogMessages.writeMessage( '  make' )
    commandHistory+=[ 'make' ]
    result=NBosCommand.run('make')
    writeResults(result,'make') 

    # Check if make worked
    if result['returnCode'] != 0 :
      result['configure flags']=configOptions
      result['svn version']=configuration['svnVersion']
      result['command history']=commandHistory
      NBemail.sendCmdMsgs(configuration['project'],result,'make')
      return

  if configuration['buildMethod']=='msSln' :
    #---------------------------------------------------------------------
    # Source is now available, so now it is time to run vcbuild
    #---------------------------------------------------------------------
   
    slnFileDir = os.path.join(projectCheckOutDir,\
                          configuration['project'],\
                          'MSVisualStudio',\
                          'v8')
    if not os.path.isdir(slnFileDir) :
      NBlogMessages.writeMessage("  Solution file directory does not exist: "+slnFileDir)
      return

    os.chdir(slnFileDir)
    NBlogMessages.writeMessage('  cd '+slnFileDir)

    if configuration.has_key('slnFile') :
      slnFileName = configuration['slnFile']
    else :
      slnFileName = configuration['project']+'.sln'
    if not os.path.isfile(slnFileName) :
      NBlogMessages.writeMessage("  Solution file does not exist '" \
                                 +slnFileName \
                                 +"' in directory " \
                                 +slnFileDir )

      return

    vcbuild='vcbuild /u ' + slnFileName + ' $ALL'
             
    NBlogMessages.writeMessage("  "+vcbuild)
    commandHistory+=[ vcbuild ]

    # Finally run vcbuild
    result=NBosCommand.run(vcbuild)
    writeResults(result,'vcbuild') 

    # Check if vcbuild worked
    if result['returnCode'] != 0 :
        error_msg = result
        error_msg['svn version']=configuration['svnVersion']
        error_msg['command history']=commandHistory
        NBemail.sendCmdMsgs(configuration['project'],error_msg,vcbuild)
        return

  #---------------------------------------------------------------------
  # Run all test executables
  #---------------------------------------------------------------------
  if "test" in configuration :
    for t in range( len(configuration['test']) ) :
      testRelDir=configuration['test'][t]['dir']
      testDir = os.path.join(fullBuildDir,testRelDir)
      testCmd=configuration['test'][t]['cmd']
      if not os.path.isdir(testDir) :
        NBlogMessages.writeMessage('  Directory to run test from does not exist:')
        NBlogMessages.writeMessage('    Intended directory: '+testDir)
        NBlogMessages.writeMessage('    Intended command: '+testCmd)
        continue
      os.chdir(testDir)
      NBlogMessages.writeMessage('  cd '+testDir)

      NBlogMessages.writeMessage( '  '+testCmd )
      commandHistory+=[ testCmd ]
      result=NBosCommand.run(testCmd)
      writeResults(result,testCmd) 
        
      for testFunc in configuration['test'][t]['check'] :
        testResultFail=testFunc(result,configuration['project'])
        if testResultFail :
          result['svn version']=configuration['svnVersion']
          result['test']=testResultFail
          result['command history']=commandHistory
          NBemail.sendCmdMsgs(configuration['project'],result,testCmd)
          return


  #---------------------------------------------------------------------
  # Everything build and all tests passed.
  #---------------------------------------------------------------------
  os.chdir(fullBuildDir)
  f=open('NBallTestsPassed','w')
  f.close()
