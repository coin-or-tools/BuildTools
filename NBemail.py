#! /usr/bin/env python

#------------------------------------------------------------------------
# This file is distributed under the Common Public License.
# It is part of the BuildTools project in COIN-OR (www.coin-or.org)
#------------------------------------------------------------------------

import os
import sys
from socket import gethostname 
import smtplib

import NBprojectConfig
import NBlogMessages

execfile('NBuserParametersDefault.py')
execfile('NBuserParameters.py')

#------------------------------------------------------------------------
#
# This file contains the functions that deal with email
#
#------------------------------------------------------------------------

#------------------------------------------------------------------------
# Send email typically about an error.
#  project: coin project name
#  cmd: command being executed. perhaps: "svn update", "./configure", 
#       "make".
#  cmdMsgs: the messages generated by cmd.  This will typically contain
#       errors issued by cmd and additional information about the build.
#------------------------------------------------------------------------
def sendCmdMsgs(project,cmdMsgs,cmd):
  curDir = os.getcwd()

  toAddrs = [unscrambleAddress(MY_EMAIL_ADDR)]
  if SEND_MAIL_TO_PROJECT_MANAGER and NBprojectConfig.PROJECT_EMAIL_ADDRS.has_key(project) :
    scrambledEmailAddress=NBprojectConfig.PROJECT_EMAIL_ADDRS[project]
    unscrambledEmailAddress=unscrambleAddress(scrambledEmailAddress)
    toAddrs.append(unscrambledEmailAddress)

  subject = "NightlyBuild on "+sys.platform+". "+project
  if cmdMsgs.has_key('svn version') :
    subject += " "+cmdMsgs['svn version']
  subject+=". Problem with '" + cmd +"'"

  emailMsg = "Subject: "+subject+"\n\n"
  emailMsg += "Dear "+project+" Project Manager,\n\n" \
   +"The nightly build test script reported a problem when building "+project
  if cmdMsgs.has_key('svn version') :
    emailMsg += " from svn version "+cmdMsgs['svn version']
  emailMsg += ".\nThe failing command was\n\n\t"+cmd+"\n\n" \
   +"Details on the problem can be found below.\n" \
   +"The cause of the problem may be from one of the projects that "\
   +project+" depends on (externals).\n" \
   +"You can contact the person who ran this test by sending email to: "\
   +unscrambleAddress(MY_EMAIL_ADDR)+".\n"\
   +"We hope you find this report useful.\n\n"

  if cmdMsgs.has_key("configure flags") :
    emailMsg += "Flags for configure: "+cmdMsgs['configure flags']+'\n'

  emailMsg += "Operating System: "+sys.platform+" "+os.name+"\n"
  emailMsg += "Host name: "+gethostname()+"\n"

  if os.environ.has_key("HOSTTYPE") :
    emailMsg += "Host type: "+os.environ["HOSTTYPE"]+"\n"
  if os.environ.has_key("PROCESSOR_IDENTIFIER") :
    emailMsg += "Processor: "+os.environ["PROCESSOR_IDENTIFIER"]+"\n"
  if os.environ.has_key("NUMBER_OF_PROCESSORS") :
    emailMsg += "Number of processors: "+os.environ["NUMBER_OF_PROCESSORS"]+"\n"

  if os.environ.has_key("PATH") :
    emailMsg += "PATH: "+os.environ["PATH"]+"\n"

  emailMsg += "Directory: "+curDir+'\n'

  if cmdMsgs.has_key('test') :
    emailMsg += "\n\nDetected problem when running test:\n"
    emailMsg += cmdMsgs['test']
    emailMsg += "\n"
    
  if cmdMsgs.has_key('command history') :
    emailMsg += "\nHistory of commands called for this build:\n"
    for cmditem in cmdMsgs['command history'] :
      emailMsg += "  "+cmditem+"\n"

  emailMsg +="\nnightlyBuildScript log:\n"
  emailMsg +=NBlogMessages.getMessages()

  emailMsg +="\n"

  emailMsg += "stderr messages are:\n" 
  emailMsg += cmdMsgs['stderr']
  emailMsg += "\n\nstdout messages are:\n"
  emailMsg += cmdMsgs['stdout']
  if cmdMsgs.has_key('config.log') :
    emailMsg += "\n\nconfig.log messages are:\n"
    emailMsg += cmdMsgs['config.log']

  send(toAddrs,subject,emailMsg)
  NBlogMessages.writeMessage( "  email sent regarding "+project+" running '"+cmd+"'" )

#------------------------------------------------------------------------
# Send email (or store in a file)
#------------------------------------------------------------------------
def send(toAddrs,subject,message):

  sender = unscrambleAddress(SENDER_EMAIL_ADDR)  
  msgWHeader = ("From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n"
       % (sender, ", ".join(toAddrs), subject))
  msgWHeader += message

  #store email in a file instead of sending
  if len(EMAIL_STOREFILE) > 0 and not EMAIL_STOREFILE.isspace() :
    NBlogMessages.writeMessage( '  store email in file '+EMAIL_STOREFILE)
    emailfile=open(NIGHTLY_BUILD_ROOT_DIR+'/'+EMAIL_STOREFILE, 'a')
    emailfile.write(msgWHeader)
    emailfile.write("\n============ EMAIL END ======================================\n")
    emailfile.close()
    return

  # Get smtp server password
  if os.path.isfile(SMTP_PASSWORD_FILENAME) :
    pwFilePtr = open(SMTP_PASSWORD_FILENAME,'r')
    smtppass  = pwFilePtr.read().strip()
    #print smtppass
    pwFilePtr.close()
  else :
    NBlogMessages.writeMessage( "Failure reading pwFileName=" + SMTP_PASSWORD_FILENAME )
    sys.exit(1)
    
  session = smtplib.SMTP(SMTP_SERVER_NAME,SMTP_SERVER_PORT)
  #session.set_debuglevel(1)
  if SMTP_SSL_SERVER==1 :
    session.ehlo('x')
    session.starttls()
    session.ehlo('x')  
  session.login(unscrambleAddress(SMTP_USER_NAME),smtppass)

  rc = session.sendmail(sender,toAddrs,msgWHeader)
  if rc!={} :
    NBlogMessages.writeMessage( 'session.sendmail rc='  )
    NBlogMessages.writeMessage( rc )
  session.quit()

#------------------------------------------------------------------------
# Decrypt email address 
#------------------------------------------------------------------------
def unscrambleAddress( scrambledEmailAddress ) :
  retVal = scrambledEmailAddress
  retVal = retVal.replace(' _AT_ ','@')
  retVal = retVal.replace(' _DOT_ ','.')
  return retVal

